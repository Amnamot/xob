import { Injectable } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { InjectRedis } from '@nestjs-modules/ioredis';
import Redis from 'ioredis';
import { GameSession, Lobby } from './types';

@Injectable()
export class GameService {
  private activeSessions = new Map<string, GameSession>();
  private activeLobbies = new Map<string, Lobby>();
  private userLobbyRequests = new Map<string, { count: number, timestamp: number }>();

  constructor(
    private readonly prisma: PrismaService,
    @InjectRedis() private readonly redis: Redis,
  ) {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    setInterval(() => {
      this.cleanupInconsistentData().catch(error => {
        console.error('Error during cleanup:', error);
      });
    }, 5 * 60 * 1000);
  }

  private async checkLobbyLimit(telegramId: string): Promise<boolean> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–æ–±–±–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞–º—è—Ç–∏
    for (const [_, lobby] of this.activeLobbies) {
      if (lobby.creatorId === telegramId && lobby.status === 'active') {
        return false;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–æ–±–±–∏ –≤ Redis —á–µ—Ä–µ–∑ –∏–Ω–¥–µ–∫—Å
    const existingLobbyId = await this.redis.get(`user_lobby:${telegramId}`);
    
    if (existingLobbyId) {
      const lobbyData = await this.redis.get(existingLobbyId);
      if (lobbyData) {
        this.activeLobbies.set(existingLobbyId, {
          id: existingLobbyId,
          creatorId: telegramId,
          createdAt: Date.now(),
          status: 'active'
        });
        return false;
      }
      // –ï—Å–ª–∏ –ª–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ –∏–Ω–¥–µ–∫—Å –µ—Å—Ç—å - –æ—á–∏—â–∞–µ–º –∏–Ω–¥–µ–∫—Å
      await this.redis.del(`user_lobby:${telegramId}`);
    }
    
    return true;
  }

  private async checkRateLimit(telegramId: string): Promise<boolean> {
    const now = Date.now();
    const userRequests = this.userLobbyRequests.get(telegramId);

    if (!userRequests) {
      // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
      this.userLobbyRequests.set(telegramId, { count: 1, timestamp: now });
      return true;
    }

    if (now - userRequests.timestamp > 60000) {
      // –ü—Ä–æ—à–ª–∞ –º–∏–Ω—É—Ç–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
      this.userLobbyRequests.set(telegramId, { count: 1, timestamp: now });
      return true;
    }

    if (userRequests.count >= 1) {
      // –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
      return false;
    }

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    userRequests.count++;
    this.userLobbyRequests.set(telegramId, userRequests);
    return true;
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–±–±–∏
  getActiveLobbies(): Map<string, Lobby> {
    return this.activeLobbies;
  }

  async checkLobbyInRedis(lobbyId: string): Promise<boolean> {
    try {
      const exists = await this.redis.exists(lobbyId);
      return exists === 1;
    } catch (error) {
      console.error('Redis error:', error);
      return false;
    }
  }

  async createLobby(creatorId: string): Promise<Lobby | null> {
    console.log('üéØ Starting lobby creation for creator:', creatorId);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
      const withinRateLimit = await this.checkRateLimit(creatorId);
      if (!withinRateLimit) {
        console.warn('‚ö†Ô∏è Rate limit exceeded for creator:', creatorId);
        throw new Error('Please wait before creating another lobby');
      }

      // –ü—ã—Ç–∞–µ–º—Å—è –∞—Ç–æ–º–∞—Ä–Ω–æ —Å–æ–∑–¥–∞—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
      console.log('üîí Attempting to acquire lock for creator:', creatorId);
      const lockResult = await this.redis.set(
        `user_lobby:${creatorId}`,
        'pending',
        'EX',
        180,
        'NX'
      );

      if (!lockResult) {
        console.warn('‚ö†Ô∏è Creator already has an active lobby:', creatorId);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ª–æ–±–±–∏
        const existingLobbyId = await this.redis.get(`user_lobby:${creatorId}`);
        console.log('üîç Found existing lobby:', existingLobbyId);
        
        if (existingLobbyId && existingLobbyId !== 'pending') {
          const lobbyData = await this.redis.get(existingLobbyId);
          if (lobbyData) {
            console.warn('‚ö†Ô∏è Active lobby exists:', { lobbyId: existingLobbyId, data: lobbyData });
          }
        }
        
        throw new Error('You already have an active lobby');
      }

      console.log('‚úÖ Lock acquired for creator:', creatorId);

      try {
        const lobbyId = `lobby_${Date.now()}_${Math.floor(Math.random() * 1000)}`;
        console.log('üìù Generating new lobby:', lobbyId);

        const lobby: Lobby = {
          id: lobbyId,
          creatorId,
          createdAt: Date.now(),
          status: 'active'
        };

        // –°–æ–∑–¥–∞–µ–º –ª–æ–±–±–∏ –∞—Ç–æ–º–∞—Ä–Ω–æ
        const multi = this.redis.multi();
        multi.set(lobbyId, JSON.stringify(lobby), 'EX', 180);
        multi.set(`user_lobby:${creatorId}`, lobbyId, 'EX', 180);
        
        console.log('üíæ Executing Redis transaction for lobby creation');
        const results = await multi.exec();
        
        if (!results || results.some(result => !result[1])) {
          console.error('‚ùå Redis transaction failed:', results);
          throw new Error('Failed to create lobby: Redis transaction error');
        }

        console.log('‚úÖ Lobby successfully created in Redis:', { lobbyId, creatorId });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç–∏
        this.activeLobbies.set(lobbyId, lobby);
        console.log('üì¶ Lobby saved in memory');

        // –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
        const [storedLobby, storedIndex] = await Promise.all([
          this.redis.get(lobbyId),
          this.redis.get(`user_lobby:${creatorId}`)
        ]);
        
        console.log('üîç Verification:', {
          lobbyExists: !!storedLobby,
          indexExists: !!storedIndex,
          indexMatches: storedIndex === lobbyId
        });

        return lobby;
      } catch (error) {
        // –ü—Ä–∏ –æ—à–∏–±–∫–µ —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        console.error('‚ùå Error during lobby creation:', error);
        await this.redis.del(`user_lobby:${creatorId}`);
        console.log('üßπ Cleaned up temporary lock for creator:', creatorId);
        throw error;
      }
    } catch (error) {
      console.error('‚ùå Lobby creation failed:', error);
      throw error;
    }
  }

  async getLobby(lobbyId: string): Promise<Lobby | null> {
    try {
      const lobby = this.activeLobbies.get(lobbyId);
      if (!lobby) {
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Redis
        const redisLobby = await this.redis.get(lobbyId);
        if (redisLobby) {
          const lobby = JSON.parse(redisLobby) as Lobby;
          this.activeLobbies.set(lobbyId, lobby);
          return lobby;
        }
        return null;
      }
      return lobby;
    } catch (error) {
      console.error('Error getting lobby:', error);
      return null;
    }
  }

  async markLobbyPending(lobbyId: string): Promise<void> {
    console.log('‚è≥ Marking lobby as pending:', lobbyId);
    
    try {
      const lobby = this.activeLobbies.get(lobbyId);
      if (lobby) {
        console.log('üìù Found lobby in memory:', { lobbyId, creatorId: lobby.creatorId });
        
        lobby.status = 'pending';
        
        const multi = this.redis.multi();
        // –û—Å–Ω–æ–≤–Ω–æ–π TTL –ª–æ–±–±–∏ –æ—Å—Ç–∞–µ—Ç—Å—è 180 —Å–µ–∫—É–Ω–¥
        multi.set(lobbyId, JSON.stringify(lobby), 'EX', 180);
        multi.set(`user_lobby:${lobby.creatorId}`, lobbyId, 'EX', 180);
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è pending —Å—Ç–∞—Ç—É—Å–∞ —Å TTL 30 —Å–µ–∫—É–Ω–¥
        multi.set(`pending:${lobbyId}`, '1', 'EX', 30);
        
        console.log('üíæ Executing Redis transaction for pending status');
        const results = await multi.exec();
        
        if (!results || results.some(result => !result[1])) {
          console.error('‚ùå Redis transaction failed:', results);
          throw new Error('Failed to mark lobby as pending');
        }
        
        console.log('‚úÖ Lobby marked as pending:', lobbyId);
      }
    } catch (error) {
      console.error('‚ùå Error marking lobby as pending:', error);
      throw error;
    }
  }

  async restoreLobby(lobbyId: string): Promise<void> {
    try {
      const lobby = this.activeLobbies.get(lobbyId);
      if (lobby) {
        lobby.status = 'active';
        
        const multi = this.redis.multi();
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TTL –≤ Redis –¥–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        multi.set(lobbyId, JSON.stringify(lobby), 'EX', 180);
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TTL –∏–Ω–¥–µ–∫—Å–∞
        multi.set(`user_lobby:${lobby.creatorId}`, lobbyId, 'EX', 180);
        await multi.exec();
        
        this.activeLobbies.set(lobbyId, lobby);
      }
    } catch (error) {
      console.error('Error restoring lobby:', error);
    }
  }

  async deleteLobby(lobbyId: string): Promise<void> {
    console.log('üóëÔ∏è Starting lobby deletion:', lobbyId);
    
    try {
      const lobby = this.activeLobbies.get(lobbyId);
      if (lobby) {
        console.log('üìù Found lobby in memory:', { lobbyId, creatorId: lobby.creatorId });
        
        const multi = this.redis.multi();
        multi.del(lobbyId);
        multi.del(`user_lobby:${lobby.creatorId}`);
        
        console.log('üíæ Executing Redis transaction for lobby deletion');
        const results = await multi.exec();
        
        if (!results || results.some(result => !result[1])) {
          console.warn('‚ö†Ô∏è Redis deletion partially failed:', results);
        }

        lobby.status = 'closed';
        this.activeLobbies.delete(lobbyId);
        
        // –û—á–∏—â–∞–µ–º rate limit –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è –ª–æ–±–±–∏
        this.userLobbyRequests.delete(lobby.creatorId);
        console.log('üßπ Cleaned up rate limit data for creator:', lobby.creatorId);
        
        console.log('‚úÖ Lobby successfully deleted:', lobbyId);
      } else {
        console.warn('‚ö†Ô∏è Lobby not found in memory:', lobbyId);
      }
    } catch (error) {
      console.error('‚ùå Error during lobby deletion:', error);
      throw error;
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–≥—Ä–æ–≤—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏
  async createGameSession(lobbyId: string, opponentId: string, pay: boolean = false): Promise<GameSession> {
    const lobby = this.activeLobbies.get(lobbyId);
    if (!lobby) {
      throw new Error('Lobby not found');
    }

    const session: GameSession = {
      id: lobbyId, // –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ ID
      creatorId: lobby.creatorId,
      opponentId,
      currentTurn: lobby.creatorId, // –ø–µ—Ä–≤—ã–π —Ö–æ–¥ –∑–∞ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º
      board: Array(100).fill(null).map(() => Array(100).fill(null)), // 100x100 –ø—É—Å—Ç–∞—è –¥–æ—Å–∫–∞
      numMoves: 0,
      pay,
      startedAt: Date.now(),
      playerTime1: 0,
      playerTime2: 0,
      lastMoveTime: Date.now()
    };

    this.activeSessions.set(session.id, session);
    
    // –£–¥–∞–ª—è–µ–º –ª–æ–±–±–∏
    await this.deleteLobby(lobbyId);

    return session;
  }

  getGameSession(gameId: string): GameSession | null {
    return this.activeSessions.get(gameId) || null;
  }

  async updateGameSession(gameId: string, updates: Partial<GameSession>): Promise<GameSession> {
    const session = this.activeSessions.get(gameId);
    if (!session) {
      throw new Error('Game session not found');
    }

    Object.assign(session, updates);
    this.activeSessions.set(gameId, session);
    return session;
  }

  async getGameResult(gameId: string): Promise<{ 
    winner: string;
    reason: string;
    statistics: {
      totalTime: number;
      moves: number;
      playerTime1: number;
      playerTime2: number;
    };
  } | null> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ë–î
      const game = await this.prisma.game.findFirst({
        where: {
          id: parseInt(gameId)
        }
      });

      if (!game) return null;

      return {
        winner: game.winner,
        reason: game.reason || 'unknown',
        statistics: {
          totalTime: game.time,
          moves: game.numMoves,
          playerTime1: game.playertime1,
          playerTime2: game.playertime2
        }
      };
    } catch (error) {
      console.error('Error getting game result:', error);
      return null;
    }
  }

  async endGameSession(gameId: string, winnerId: string, reason: string = 'unknown'): Promise<void> {
    const session = this.activeSessions.get(gameId);
    if (!session) {
      throw new Error('Game session not found');
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
    const game = await this.prisma.game.create({
      data: {
        createdBy: session.creatorId,
        rival: session.opponentId,
        winner: winnerId,
        reason: reason,
        pay: session.pay,
        numMoves: session.numMoves,
        time: Math.floor((Date.now() - session.startedAt) / 1000),
        playertime1: Math.floor(session.playerTime1 / 1000),
        playertime2: Math.floor(session.playerTime2 / 1000),
        created: new Date(session.startedAt),
        finished: new Date()
      }
    });

    // –£–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
    this.activeSessions.delete(gameId);
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
  private async cleanupInconsistentData(): Promise<void> {
    const lobbies = Array.from(this.activeLobbies.values());
    
    for (const lobby of lobbies) {
      const [lobbyExists, indexExists] = await Promise.all([
        this.redis.exists(lobby.id),
        this.redis.exists(`user_lobby:${lobby.creatorId}`)
      ]);
      
      if (!lobbyExists || !indexExists) {
        // –û—á–∏—â–∞–µ–º –Ω–µ–∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await this.deleteLobby(lobby.id);
        // Rate limit –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ—á–∏—â–µ–Ω—ã –≤ –º–µ—Ç–æ–¥–µ deleteLobby
      }
    }
    
    // –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ rate limit –¥–∞–Ω–Ω—ã–µ
    const now = Date.now();
    for (const [telegramId, request] of this.userLobbyRequests.entries()) {
      if (now - request.timestamp > 60000) { // –ü—Ä–æ—à–ª–∞ –º–∏–Ω—É—Ç–∞
        this.userLobbyRequests.delete(telegramId);
        console.log('üßπ Cleaned up expired rate limit data for:', telegramId);
      }
    }
  }

  async findLobbyByCreator(creatorId: string): Promise<Lobby | null> {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –ø–∞–º—è—Ç–∏
      for (const [_, lobby] of this.activeLobbies) {
        if (lobby.creatorId === creatorId) {
          return lobby;
        }
      }

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –ø–∞–º—è—Ç–∏, –∏—â–µ–º —á–µ—Ä–µ–∑ –∏–Ω–¥–µ–∫—Å –≤ Redis
      const lobbyId = await this.redis.get(`user_lobby:${creatorId}`);
      if (!lobbyId) return null;

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ª–æ–±–±–∏
      const lobbyData = await this.redis.get(lobbyId);
      if (!lobbyData) {
        // –û—á–∏—â–∞–µ–º –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
        await this.redis.del(`user_lobby:${creatorId}`);
        return null;
      }

      try {
        const lobby = JSON.parse(lobbyData) as Lobby;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
        const ttl = await this.redis.ttl(lobbyId);
        
        // –ï—Å–ª–∏ TTL –∏—Å—Ç–µ–∫ –∏–ª–∏ –±–ª–∏–∑–æ–∫ –∫ –∏—Å—Ç–µ—á–µ–Ω–∏—é, —Å—á–∏—Ç–∞–µ–º –ª–æ–±–±–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º
        if (ttl <= 0) {
          await this.deleteLobby(lobbyId);
          return null;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
        this.activeLobbies.set(lobby.id, lobby);
        return lobby;
      } catch (error) {
        console.error('‚ùå Error parsing lobby data:', error);
        return null;
      }
    } catch (error) {
      console.error('Error finding lobby by creator:', error);
      return null;
    }
  }
} 